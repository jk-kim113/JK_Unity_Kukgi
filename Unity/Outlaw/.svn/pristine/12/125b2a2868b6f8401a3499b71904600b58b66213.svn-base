using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player : UnitBase
{
#pragma warning disable 0649
    [SerializeField]
    Transform _posFire;
#pragma warning restore

    CharacterController _controller;
    Animator _animControl;
    GameObject _modelObj;
    GameObject _prefabbullet;

    // UI Reference
    StickObject _stickLauncher;

    float _runSpeed = 5;
    float _walkSpeed = 1f;
    bool _isAttack = false;

    private void Awake()
    {
        _controller = GetComponent<CharacterController>();
        _animControl = GetComponent<Animator>();
        _modelObj = transform.GetChild(0).gameObject;
        _prefabbullet = Resources.Load("Prefabs/Objects/BulletObject") as GameObject;

        _animControl.SetBool("IsBattle", true);
    }

    private void Start()
    {
        _stickLauncher = GameObject.FindGameObjectWithTag("LauncherStick").GetComponent<StickObject>();
        _stickLauncher.SetOwnerPlayer(this);
    }

    private void Update()
    {
        float speed = _runSpeed;
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");

        Vector3 move = new Vector3(vertical, 0, -horizontal);
        move = (move.magnitude > 1) ? move.normalized : move;

        if(_stickLauncher._isAimMotion)
        {
            //방향을 받아서 방향에 따른 애니메이션 변화
            speed = ChangeAnimationToDirection(move);
        }
        else
        {//일반적인 이동시
            if (move.magnitude == 0)
                _animControl.SetInteger("AniType", (int)eAniType.IDLE);
            else if (move.magnitude > 0)
            {
                _animControl.SetInteger("AniType", (int)eAniType.RUN);
                _modelObj.transform.rotation = Quaternion.LookRotation(move);
            }
        }

        _controller.Move(move * Time.deltaTime * speed);
    }

    float ChangeAnimationToDirection(Vector3 dir)
    {
        float spd = _walkSpeed;

        if(dir == Vector3.zero)
        {//공격할 때
            if(_animControl.GetInteger("AniType") != (int)eAniType.ATTACK)
            {
                _animControl.SetInteger("AniType", (int)eAniType.ATTACK);
                _animControl.SetBool("StartAttack", true);
            }
            
            _modelObj.transform.rotation = Quaternion.LookRotation(_stickLauncher._direction);
        }
        else
        {//움직일 때
            InitializeDirection();
            if (dir.z == 0)
            {
                if (dir.x > 0)
                {//왼쪽으로 움직이고 있을 때
                    _animControl.SetInteger("AniType", (int)eAniType.WALK_LEFT);
                }
                else if(dir.x < 0)
                {//오른쪽으로 움직이고 있을 때
                    _animControl.SetInteger("AniType", (int)eAniType.WALK_RIGHT);
                }
            }
            else if(dir.z > 0)
            {// 앞쪽으로 움직임이 있을 때
                spd = _runSpeed;
                _animControl.SetInteger("AniType", (int)eAniType.RUN);
            }
            else
            {// 천천히 움직이고 있을 때
                _animControl.SetInteger("AniType", (int)eAniType.WALK_BACK);
            }
        }

        return spd;
    }

    public void InitializeDirection()
    {
        _modelObj.transform.rotation = Quaternion.identity;
    }

    public void Fire()
    {   
        Instantiate(_prefabbullet, _posFire.transform.position, _posFire.transform.rotation);

        _animControl.SetBool("StartAttack", false);
    }
}
