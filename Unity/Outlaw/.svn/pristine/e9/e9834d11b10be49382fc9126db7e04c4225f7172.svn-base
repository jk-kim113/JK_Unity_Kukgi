using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class Monster : UnitBase
{
    enum eAniKeyType
    {
        IDLE         = 0,
        WALK,
        RUN,
        ATTACK,
        HIT
    }

    public enum eTypeRoam
    {
        Random      = 0,
        Loop,
        PingPong
    }

#pragma warning disable 0649
    [SerializeField]
    eTypeRoam _roamingType = eTypeRoam.Random;
#pragma warning restore

    eAniType _nowAction;
    Animation _ctrlAni;
    NavMeshAgent _navAgent;
    Dictionary<eAniKeyType, string> _aniList = new Dictionary<eAniKeyType, string>();
    List<Vector3> _roamPointList = new List<Vector3>();

    Vector3 _posGoal;
    float _runSpeed = 4;
    float _walkSpeed = 4.7f;
    float _movSpeed;
    int _nowIndex = 0;
    bool _isIncrese = true;

    private void Awake()
    {
        _ctrlAni = GetComponent<Animation>();
        _navAgent = GetComponent<NavMeshAgent>();
        _navAgent.enabled = false;
        MyAnimationList();
    }

    private void Start()
    {
        _ctrlAni.Play(_aniList[eAniKeyType.IDLE]);

        //임시
        //Transform tf = GameObject.Find("RootRoam").transform;
        //SetRoamPositions(tf);
        SettingGoalPosition(GetNextPosition());
        //====
    }

    private void Update()
    {
        if (_isDead)
            return;

        if (!_ctrlAni.isPlaying)
            ChangedAction(eAniType.IDLE);

        if(Vector3.Distance(transform.position, _navAgent.destination) < 0.1f)
        //{
        //    transform.position = Vector3.MoveTowards(transform.position, _posGoal, _movSpeed * Time.deltaTime);
        //}
        //else
        {
            //transform.position = _posGoal;
            //ChangedAction(eAniType.IDLE);
            SettingGoalPosition(GetNextPosition());
        }
            
    }

    public void SettingGoalPosition(Vector3 point, bool isRun = false)
    {
        //_posGoal = point;
        //transform.LookAt(_posGoal);
        if (isRun)
            ChangedAction(eAniType.RUN);
        else
            ChangedAction(eAniType.WALK);

        _navAgent.destination = point;
    }

    public void SetRoamPositions(Transform root)
    {
        for(int n = 0; n < root.childCount; n++)
        {
            _roamPointList.Add(root.GetChild(n).position);
        }
    }
    
    Vector3 GetNextPosition()
    {
        switch(_roamingType)
        {
            case eTypeRoam.Random:
                _nowIndex = Random.Range(0, _roamPointList.Count);
                return _roamPointList[_nowIndex];

            case eTypeRoam.Loop:
                if (_nowIndex >= _roamPointList.Count)
                    _nowIndex = 0;
                return _roamPointList[_nowIndex++];

            case eTypeRoam.PingPong:
                if (_isIncrese && _nowIndex >= _roamPointList.Count)
                {
                    _isIncrese = false;
                    _nowIndex--;
                }   
                else if (!_isIncrese && _nowIndex < 0)
                {
                    _isIncrese = true;
                    _nowIndex++;
                }   

                if (!_isIncrese)
                    return _roamPointList[_nowIndex--];
                else
                    return _roamPointList[_nowIndex++]; 
            default:
                return Vector3.zero;
        }
    }

    void MyAnimationList()
    {
        int cnt = 0;
        foreach(AnimationState state in _ctrlAni)
        {
            _aniList.Add((eAniKeyType)cnt, state.name);
            cnt++;
        }
    }

    void ChangedAction(eAniType type)
    {
        switch(type)
        {
            case eAniType.IDLE:
                _navAgent.enabled = false;
                _ctrlAni.CrossFade(_aniList[eAniKeyType.IDLE]);
                break;
            case eAniType.WALK:
                _navAgent.enabled = true;
                _navAgent.speed = _walkSpeed;
                _ctrlAni.CrossFade(_aniList[eAniKeyType.WALK]);
                break;
            case eAniType.RUN:
                _navAgent.enabled = true;
                _navAgent.speed = _runSpeed;
                _ctrlAni.CrossFade(_aniList[eAniKeyType.RUN]);
                break;
            case eAniType.ATTACK:
                _navAgent.enabled = false;
                _ctrlAni.CrossFade(_aniList[eAniKeyType.ATTACK]);
                break;
            case eAniType.DEAD:
                _navAgent.enabled = false;
                _ctrlAni.CrossFade(_aniList[eAniKeyType.HIT]);
                break;
        }

        _nowAction = type;
    }

    //private void OnGUI()
    //{
    //    if (GUI.Button(new Rect(0, 0, 300, 100), "IDLE"))
    //    {
    //        ChangedAction(eAniType.IDLE);
    //    }
    //    else if (GUI.Button(new Rect(300, 0, 300, 100), "WALK"))
    //    {
    //        ChangedAction(eAniType.WALK);
    //    }
    //    else if (GUI.Button(new Rect(600, 0, 300, 100), "ATTACK"))
    //    {
    //        ChangedAction(eAniType.ATTACK);
    //    }
    //}
}
